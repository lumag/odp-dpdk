/* Copyright (c) 2014-2018, Linaro Limited
 * All rights reserved.
 *
 * SPDX-License-Identifier:	BSD-3-Clause
 */

#ifndef _ODP_TEST_CRYPTO_VECTORS_H_
#define _ODP_TEST_CRYPTO_VECTORS_H_

#include "test_vectors_len.h"

typedef struct crypto_test_reference_s {
	uint32_t cipher_key_length;
	uint8_t cipher_key[MAX_KEY_LEN];
	uint32_t auth_key_length;
	uint8_t auth_key[MAX_KEY_LEN];
	uint32_t cipher_iv_length;
	uint8_t cipher_iv[MAX_IV_LEN];
	uint32_t auth_iv_length;
	uint8_t auth_iv[MAX_IV_LEN];
	uint32_t length;
	uint8_t plaintext[MAX_DATA_LEN];
	uint8_t ciphertext[MAX_DATA_LEN];
	uint32_t aad_length;
	uint8_t aad[MAX_AAD_LEN];
	uint32_t digest_length;
	uint8_t digest[MAX_DIGEST_LEN];
	odp_bool_t bit_mode;
} crypto_test_reference_t;

static crypto_test_reference_t null_reference[] = {
	{
		.length = 8,
		.plaintext = { 0x32, 0x6a, 0x49, 0x4c, 0xd3, 0x3f, 0xe7, 0x56 },
		.ciphertext = { 0x32, 0x6a, 0x49, 0x4c, 0xd3, 0x3f, 0xe7, 0x56 }
	},
	{
		.length = 16,
		.plaintext = { 0x84, 0x40, 0x1f, 0x78, 0xfe, 0x6c, 0x10, 0x87,
			       0x6d, 0x8e, 0xa2, 0x30, 0x94, 0xea, 0x53, 0x09 },
		.ciphertext = { 0x84, 0x40, 0x1f, 0x78, 0xfe, 0x6c, 0x10, 0x87,
			       0x6d, 0x8e, 0xa2, 0x30, 0x94, 0xea, 0x53, 0x09 }
	}
};

/* TDES-CBC reference vectors, according to
 * "http://csrc.nist.gov/groups/STM/cavp/documents/des/DESMMT.pdf"
 */
static crypto_test_reference_t tdes_cbc_reference[] = {
	{
		.cipher_key_length = TDES_CBC_KEY_LEN,
		.cipher_key = { 0x62, 0x7f, 0x46, 0x0e, 0x08, 0x10, 0x4a, 0x10,
				0x43, 0xcd, 0x26, 0x5d, 0x58, 0x40, 0xea, 0xf1,
				0x31, 0x3e, 0xdf, 0x97, 0xdf, 0x2a, 0x8a, 0x8c},
		.cipher_iv_length = TDES_CBC_IV_LEN,
		.cipher_iv = { 0x8e, 0x29, 0xf7, 0x5e, 0xa7, 0x7e, 0x54, 0x75 },
		.length = 8,
		.plaintext = { 0x32, 0x6a, 0x49, 0x4c, 0xd3, 0x3f, 0xe7, 0x56 },
		.ciphertext = { 0xb2, 0x2b, 0x8d, 0x66, 0xde, 0x97, 0x06, 0x92 }
	},
	{
		.cipher_key_length = TDES_CBC_KEY_LEN,
		.cipher_key = { 0x37, 0xae, 0x5e, 0xbf, 0x46, 0xdf, 0xf2, 0xdc,
				0x07, 0x54, 0xb9, 0x4f, 0x31, 0xcb, 0xb3, 0x85,
				0x5e, 0x7f, 0xd3, 0x6d, 0xc8, 0x70, 0xbf, 0xae},
		.cipher_iv_length = TDES_CBC_IV_LEN,
		.cipher_iv = {0x3d, 0x1d, 0xe3, 0xcc, 0x13, 0x2e, 0x3b, 0x65 },
		.length = 16,
		.plaintext = { 0x84, 0x40, 0x1f, 0x78, 0xfe, 0x6c, 0x10, 0x87,
			       0x6d, 0x8e, 0xa2, 0x30, 0x94, 0xea, 0x53, 0x09 },
		.ciphertext = { 0x7b, 0x1f, 0x7c, 0x7e, 0x3b, 0x1c, 0x94, 0x8e,
				0xbd, 0x04, 0xa7, 0x5f, 0xfb, 0xa7, 0xd2, 0xf5 }
	}
};

static crypto_test_reference_t aes_cbc_reference[] = {
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x06, 0xa9, 0x21, 0x40, 0x36, 0xb8, 0xa1, 0x5b,
				0x51, 0x2e, 0x03, 0xd5, 0x34, 0x12, 0x00, 0x06},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0x3d, 0xaf, 0xba, 0x42, 0x9d, 0x9e, 0xb4, 0x30,
			       0xb4, 0x22, 0xda, 0x80, 0x2c, 0x9f, 0xac, 0x41 },
		.length = 16,
		.plaintext = "Single block msg",
		.ciphertext = { 0xe3, 0x53, 0x77, 0x9c, 0x10, 0x79, 0xae, 0xb8,
				0x27, 0x08, 0x94, 0x2d, 0xbe, 0x77, 0x18, 0x1a }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0xc2, 0x86, 0x69, 0x6d, 0x88, 0x7c, 0x9a, 0xa0,
				0x61, 0x1b, 0xbb, 0x3e, 0x20, 0x25, 0xa4, 0x5a},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28,
			       0xdd, 0xb3, 0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 },
		.length = 32,
		.plaintext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			       0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f },
		.ciphertext = { 0xd2, 0x96, 0xcd, 0x94, 0xc2, 0xcc, 0xcf, 0x8a,
				0x3a, 0x86, 0x30, 0x28, 0xb5, 0xe1, 0xdc, 0x0a,
				0x75, 0x86, 0x60, 0x2d, 0x25, 0x3c, 0xff, 0xf9,
				0x1b, 0x82, 0x66, 0xbe, 0xa6, 0xd6, 0x1a, 0xb1 }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21,
				0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb,
			       0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81 },
		.length = 48,
		.plaintext = "This is a 48-byte message (exactly 3 AES blocks)",
		.ciphertext = { 0xd0, 0xa0, 0x2b, 0x38, 0x36, 0x45, 0x17, 0x53,
				0xd4, 0x93, 0x66, 0x5d, 0x33, 0xf0, 0xe8, 0x86,
				0x2d, 0xea, 0x54, 0xcd, 0xb2, 0x93, 0xab, 0xc7,
				0x50, 0x69, 0x39, 0x27, 0x67, 0x72, 0xf8, 0xd5,
				0x02, 0x1c, 0x19, 0x21, 0x6b, 0xad, 0x52, 0x5c,
				0x85, 0x79, 0x69, 0x5d, 0x83, 0xba, 0x26, 0x84 }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74,
				0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c,
			       0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9 },
		.length = 64,
		.plaintext = { 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
			       0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
			       0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
			       0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
			       0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
			       0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
			       0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
			       0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf },
		.ciphertext = { 0xc3, 0x0e, 0x32, 0xff, 0xed, 0xc0, 0x77, 0x4e,
				0x6a, 0xff, 0x6a, 0xf0, 0x86, 0x9f, 0x71, 0xaa,
				0x0f, 0x3a, 0xf0, 0x7a, 0x9a, 0x31, 0xa9, 0xc6,
				0x84, 0xdb, 0x20, 0x7e, 0xb0, 0xef, 0x8e, 0x4e,
				0x35, 0x90, 0x7a, 0xa6, 0x32, 0xc3, 0xff, 0xdf,
				0x86, 0x8b, 0xb7, 0xb2, 0x9d, 0x3d, 0x46, 0xad,
				0x83, 0xce, 0x9f, 0x9a, 0x10, 0x2e, 0xe9, 0x9d,
				0x49, 0xa5, 0x3e, 0x87, 0xf4, 0xc3, 0xda, 0x55 }
	},
	{
		.cipher_key_length = AES192_KEY_LEN,
		.cipher_key = { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
				0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
				0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
			       0xde, 0xca, 0xf8, 0x88, 0x01, 0x23, 0x45, 0x67 },
		.length = 32,
		.plaintext = { 0x45, 0x00, 0x00, 0x28, 0xa4, 0xad, 0x40, 0x00,
			       0x40, 0x06, 0x78, 0x80, 0x0a, 0x01, 0x03, 0x8f,
			       0x0a, 0x01, 0x06, 0x12, 0x80, 0x23, 0x06, 0xb8,
			       0xcb, 0x71, 0x26, 0x02, 0xdd, 0x6b, 0xb0, 0x3e },
		.ciphertext = { 0x0d, 0xbe, 0x02, 0xda, 0x68, 0x9c, 0x8f, 0x30,
				0xce, 0x7c, 0x91, 0x7d, 0x41, 0x08, 0xf6, 0xf1,
				0x8e, 0x0d, 0x7f, 0x02, 0xb6, 0x80, 0x9a, 0x2d,
				0x53, 0x1c, 0xc6, 0x98, 0x85, 0xc3, 0x00, 0xe6},
	},
	{
		.cipher_key_length = AES256_KEY_LEN,
		.cipher_key = { 0xab, 0xbc, 0xcd, 0xde, 0xf0, 0x01, 0x12, 0x23,
				0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab,
				0xab, 0xbc, 0xcd, 0xde, 0xf0, 0x01, 0x12, 0x23,
				0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab},
		.cipher_iv_length = AES_CBC_IV_LEN,
		.cipher_iv = { 0x11, 0x22, 0x33, 0x44, 0x01, 0x02, 0x03, 0x04,
			       0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c },
		.length = 48,
		.plaintext = { 0x45, 0x00, 0x00, 0x30, 0x69, 0xa6, 0x40, 0x00,
			       0x80, 0x06, 0x26, 0x90, 0xc0, 0xa8, 0x01, 0x02,
			       0x93, 0x89, 0x15, 0x5e, 0x0a, 0x9e, 0x00, 0x8b,
			       0x2d, 0xc5, 0x7e, 0xe0, 0x00, 0x00, 0x00, 0x00,
			       0x70, 0x02, 0x40, 0x00, 0x20, 0xbf, 0x00, 0x00,
			       0x02, 0x04, 0x05, 0xb4, 0x01, 0x01, 0x04, 0x02 },
		.ciphertext = { 0x92, 0x1e, 0x2f, 0x37, 0x36, 0x3c, 0x45, 0xda,
				0xc9, 0x58, 0xb7, 0x07, 0x06, 0x56, 0x54, 0xc5,
				0x93, 0x46, 0x90, 0xb8, 0xcf, 0x0d, 0x4f, 0x79,
				0xf1, 0x32, 0xc2, 0xf7, 0x23, 0xb8, 0x83, 0x09,
				0xbc, 0x37, 0x1c, 0xeb, 0x95, 0x2c, 0x42, 0x7b,
				0x39, 0x10, 0xa8, 0x76, 0xfa, 0xbe, 0x91, 0xe9},
	}
};

static crypto_test_reference_t aes_ctr_reference[] = {
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
				0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
		.cipher_iv_length = AES_CTR_IV_LEN,
		.cipher_iv = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
			       0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff },
		.length = 64,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			       0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
			       0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			       0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
			       0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			       0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			       0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 },
		.ciphertext = { 0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26,
				0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
				0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff,
				0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
				0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e,
				0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
				0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1,
				0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee }
	},
	{
		.cipher_key_length = AES192_KEY_LEN,
		.cipher_key = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52,
				0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
				0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b},
		.cipher_iv_length = AES_CTR_IV_LEN,
		.cipher_iv = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
			       0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff },
		.length = 64,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			       0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
			       0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			       0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
			       0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			       0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			       0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 },
		.ciphertext = { 0x1a, 0xbc, 0x93, 0x24, 0x17, 0x52, 0x1c, 0xa2,
				0x4f, 0x2b, 0x04, 0x59, 0xfe, 0x7e, 0x6e, 0x0b,
				0x09, 0x03, 0x39, 0xec, 0x0a, 0xa6, 0xfa, 0xef,
				0xd5, 0xcc, 0xc2, 0xc6, 0xf4, 0xce, 0x8e, 0x94,
				0x1e, 0x36, 0xb2, 0x6b, 0xd1, 0xeb, 0xc6, 0x70,
				0xd1, 0xbd, 0x1d, 0x66, 0x56, 0x20, 0xab, 0xf7,
				0x4f, 0x78, 0xa7, 0xf6, 0xd2, 0x98, 0x09, 0x58,
				0x5a, 0x97, 0xda, 0xec, 0x58, 0xc6, 0xb0, 0x50 }
	},
	{
		.cipher_key_length = AES256_KEY_LEN,
		.cipher_key = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
				0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
				0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
				0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4},
		.cipher_iv_length = AES_CTR_IV_LEN,
		.cipher_iv = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
			       0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff },
		.length = 64,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			       0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
			       0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			       0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
			       0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			       0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			       0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 },
		.ciphertext = { 0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5,
				0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28,
				0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a,
				0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
				0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c,
				0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d,
				0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6,
				0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6 }
	},
};

/* AES-GCM test vectors extracted from
 * https://tools.ietf.org/html/draft-mcgrew-gcm-test-01#section-2
 */
static crypto_test_reference_t aes_gcm_reference[] = {
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x4c, 0x80, 0xcd, 0xef, 0xbb, 0x5d, 0x10, 0xda,
				0x90, 0x6a, 0xc7, 0x3c, 0x36, 0x13, 0xa6, 0x34},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0x2e, 0x44, 0x3b, 0x68, 0x49, 0x56, 0xed, 0x7e,
			       0x3b, 0x24, 0x4c, 0xfe },
		.length = 72,
		.plaintext = { 0x45, 0x00, 0x00, 0x48, 0x69, 0x9a, 0x00, 0x00,
			       0x80, 0x11, 0x4d, 0xb7, 0xc0, 0xa8, 0x01, 0x02,
			       0xc0, 0xa8, 0x01, 0x01, 0x0a, 0x9b, 0xf1, 0x56,
			       0x38, 0xd3, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
			       0x00, 0x00, 0x00, 0x00, 0x04, 0x5f, 0x73, 0x69,
			       0x70, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x03, 0x73,
			       0x69, 0x70, 0x09, 0x63, 0x79, 0x62, 0x65, 0x72,
			       0x63, 0x69, 0x74, 0x79, 0x02, 0x64, 0x6b, 0x00,
			       0x00, 0x21, 0x00, 0x01, 0x01, 0x02, 0x02, 0x01 },
		.ciphertext = { 0xfe, 0xcf, 0x53, 0x7e, 0x72, 0x9d, 0x5b, 0x07,
				0xdc, 0x30, 0xdf, 0x52, 0x8d, 0xd2, 0x2b, 0x76,
				0x8d, 0x1b, 0x98, 0x73, 0x66, 0x96, 0xa6, 0xfd,
				0x34, 0x85, 0x09, 0xfa, 0x13, 0xce, 0xac, 0x34,
				0xcf, 0xa2, 0x43, 0x6f, 0x14, 0xa3, 0xf3, 0xcf,
				0x65, 0x92, 0x5b, 0xf1, 0xf4, 0xa1, 0x3c, 0x5d,
				0x15, 0xb2, 0x1e, 0x18, 0x84, 0xf5, 0xff, 0x62,
				0x47, 0xae, 0xab, 0xb7, 0x86, 0xb9, 0x3b, 0xce,
				0x61, 0xbc, 0x17, 0xd7, 0x68, 0xfd, 0x97, 0x32},
		.aad_length = 12,
		.aad = { 0x00, 0x00, 0x43, 0x21, 0x87, 0x65, 0x43, 0x21,
			 0x00, 0x00, 0x00, 0x00 },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0x45, 0x90, 0x18, 0x14, 0x8f, 0x6c, 0xbe, 0x72,
			    0x2f, 0xd0, 0x47, 0x96, 0x56, 0x2d, 0xfd, 0xb4  }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
				0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
			       0xde, 0xca, 0xf8, 0x88 },
		.length = 64,
		.plaintext = { 0x45, 0x00, 0x00, 0x3e, 0x69, 0x8f, 0x00, 0x00,
			       0x80, 0x11, 0x4d, 0xcc, 0xc0, 0xa8, 0x01, 0x02,
			       0xc0, 0xa8, 0x01, 0x01, 0x0a, 0x98, 0x00, 0x35,
			       0x00, 0x2a, 0x23, 0x43, 0xb2, 0xd0, 0x01, 0x00,
			       0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			       0x03, 0x73, 0x69, 0x70, 0x09, 0x63, 0x79, 0x62,
			       0x65, 0x72, 0x63, 0x69, 0x74, 0x79, 0x02, 0x64,
			       0x6b, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01 },
		.ciphertext = { 0xde, 0xb2, 0x2c, 0xd9, 0xb0, 0x7c, 0x72, 0xc1,
				0x6e, 0x3a, 0x65, 0xbe, 0xeb, 0x8d, 0xf3, 0x04,
				0xa5, 0xa5, 0x89, 0x7d, 0x33, 0xae, 0x53, 0x0f,
				0x1b, 0xa7, 0x6d, 0x5d, 0x11, 0x4d, 0x2a, 0x5c,
				0x3d, 0xe8, 0x18, 0x27, 0xc1, 0x0e, 0x9a, 0x4f,
				0x51, 0x33, 0x0d, 0x0e, 0xec, 0x41, 0x66, 0x42,
				0xcf, 0xbb, 0x85, 0xa5, 0xb4, 0x7e, 0x48, 0xa4,
				0xec, 0x3b, 0x9b, 0xa9, 0x5d, 0x91, 0x8b, 0xd1},
		.aad_length = 8,
		.aad = { 0x00, 0x00, 0xa5, 0xf8, 0x00, 0x00, 0x00, 0x0a },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0x83, 0xb7, 0x0d, 0x3a, 0xa8, 0xbc, 0x6e, 0xe4,
			    0xc3, 0x09, 0xe9, 0xd8, 0x5a, 0x41, 0xad, 0x4a }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			       0x00, 0x00, 0x00, 0x00 },
		.length = 64,
		.plaintext = { 0x45, 0x00, 0x00, 0x3c, 0x99, 0xc5, 0x00, 0x00,
			       0x80, 0x01, 0xcb, 0x7a, 0x40, 0x67, 0x93, 0x18,
			       0x01, 0x01, 0x01, 0x01, 0x08, 0x00, 0x07, 0x5c,
			       0x02, 0x00, 0x44, 0x00, 0x61, 0x62, 0x63, 0x64,
			       0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
			       0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
			       0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65,
			       0x66, 0x67, 0x68, 0x69, 0x01, 0x02, 0x02, 0x01 },
		.ciphertext = { 0x46, 0x88, 0xda, 0xf2, 0xf9, 0x73, 0xa3, 0x92,
				0x73, 0x29, 0x09, 0xc3, 0x31, 0xd5, 0x6d, 0x60,
				0xf6, 0x94, 0xab, 0xaa, 0x41, 0x4b, 0x5e, 0x7f,
				0xf5, 0xfd, 0xcd, 0xff, 0xf5, 0xe9, 0xa2, 0x84,
				0x45, 0x64, 0x76, 0x49, 0x27, 0x19, 0xff, 0xb6,
				0x4d, 0xe7, 0xd9, 0xdc, 0xa1, 0xe1, 0xd8, 0x94,
				0xbc, 0x3b, 0xd5, 0x78, 0x73, 0xed, 0x4d, 0x18,
				0x1d, 0x19, 0xd4, 0xd5, 0xc8, 0xc1, 0x8a, 0xf3},
		.aad_length = 8,
		.aad = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0xf8, 0x21, 0xd4, 0x96, 0xee, 0xb0, 0x96, 0xe9,
			    0x8a, 0xd2, 0xb6, 0x9e, 0x47, 0x99, 0xc7, 0x1d }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0x3d, 0xe0, 0x98, 0x74, 0xb3, 0x88, 0xe6, 0x49,
				0x19, 0x88, 0xd0, 0xc3, 0x60, 0x7e, 0xae, 0x1f},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0x57, 0x69, 0x0e, 0x43, 0x4e, 0x28, 0x00, 0x00,
			       0xa2, 0xfc, 0xa1, 0xa3 },
		.length = 28,
		.plaintext = { 0x45, 0x00, 0x00, 0x1c, 0x42, 0xa2, 0x00, 0x00,
			       0x80, 0x01, 0x44, 0x1f, 0x40, 0x67, 0x93, 0xb6,
			       0xe0, 0x00, 0x00, 0x02, 0x0a, 0x00, 0xf5, 0xff,
			       0x01, 0x02, 0x02, 0x01 },
		.ciphertext = { 0xfb, 0xa2, 0xca, 0x84, 0x5e, 0x5d, 0xf9, 0xf0,
				0xf2, 0x2c, 0x3e, 0x6e, 0x86, 0xdd, 0x83, 0x1e,
				0x1f, 0xc6, 0x57, 0x92, 0xcd, 0x1a, 0xf9, 0x13,
				0x0e, 0x13, 0x79, 0xed },
		.aad_length = 12,
		.aad = { 0x42, 0xf6, 0x7e, 0x3f, 0x10, 0x10, 0x10, 0x10,
			 0x10, 0x10, 0x10, 0x10 },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0x36, 0x9f, 0x07, 0x1f, 0x35, 0xe0, 0x34, 0xbe,
			    0x95, 0xf1, 0x12, 0xe4, 0xe7, 0xd0, 0x5d, 0x35 }
	},
	{
		.cipher_key_length = AES192_KEY_LEN,
		.cipher_key = { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
				0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
				0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
			       0xde, 0xca, 0xf8, 0x88 },
		.length = 40,
		.plaintext = { 0x45, 0x00, 0x00, 0x28, 0xa4, 0xad, 0x40, 0x00,
			       0x40, 0x06, 0x78, 0x80, 0x0a, 0x01, 0x03, 0x8f,
			       0x0a, 0x01, 0x06, 0x12, 0x80, 0x23, 0x06, 0xb8,
			       0xcb, 0x71, 0x26, 0x02, 0xdd, 0x6b, 0xb0, 0x3e,
			       0x50, 0x10, 0x16, 0xd0, 0x75, 0x68, 0x00, 0x01 },
		.ciphertext = { 0xa5, 0xb1, 0xf8, 0x06, 0x60, 0x29, 0xae, 0xa4,
				0x0e, 0x59, 0x8b, 0x81, 0x22, 0xde, 0x02, 0x42,
				0x09, 0x38, 0xb3, 0xab, 0x33, 0xf8, 0x28, 0xe6,
				0x87, 0xb8, 0x85, 0x8b, 0x5b, 0xfb, 0xdb, 0xd0,
				0x31, 0x5b, 0x27, 0x45, 0x21, 0x44, 0xcc, 0x77},
		.aad_length = 8,
		.aad = { 0x00, 0x00, 0xa5, 0xf8, 0x00, 0x00, 0x00, 0x0a },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0x95, 0x45, 0x7b, 0x96, 0x52, 0x03, 0x7f, 0x53,
			    0x18, 0x02, 0x7b, 0x5b, 0x4c, 0xd7, 0xa6, 0x36 }
	},
	{
		.cipher_key_length = AES256_KEY_LEN,
		.cipher_key = { 0xab, 0xbc, 0xcd, 0xde, 0xf0, 0x01, 0x12, 0x23,
				0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab,
				0xab, 0xbc, 0xcd, 0xde, 0xf0, 0x01, 0x12, 0x23,
				0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab},
		.cipher_iv_length = AES_GCM_IV_LEN,
		.cipher_iv = { 0x11, 0x22, 0x33, 0x44, 0x01, 0x02, 0x03, 0x04,
			       0x05, 0x06, 0x07, 0x08 },
		.length = 52,
		.plaintext = { 0x45, 0x00, 0x00, 0x30, 0x69, 0xa6, 0x40, 0x00,
			       0x80, 0x06, 0x26, 0x90, 0xc0, 0xa8, 0x01, 0x02,
			       0x93, 0x89, 0x15, 0x5e, 0x0a, 0x9e, 0x00, 0x8b,
			       0x2d, 0xc5, 0x7e, 0xe0, 0x00, 0x00, 0x00, 0x00,
			       0x70, 0x02, 0x40, 0x00, 0x20, 0xbf, 0x00, 0x00,
			       0x02, 0x04, 0x05, 0xb4, 0x01, 0x01, 0x04, 0x02,
			       0x01, 0x02, 0x02, 0x01 },
		.ciphertext = { 0xff, 0x42, 0x5c, 0x9b, 0x72, 0x45, 0x99, 0xdf,
				0x7a, 0x3b, 0xcd, 0x51, 0x01, 0x94, 0xe0, 0x0d,
				0x6a, 0x78, 0x10, 0x7f, 0x1b, 0x0b, 0x1c, 0xbf,
				0x06, 0xef, 0xae, 0x9d, 0x65, 0xa5, 0xd7, 0x63,
				0x74, 0x8a, 0x63, 0x79, 0x85, 0x77, 0x1d, 0x34,
				0x7f, 0x05, 0x45, 0x65, 0x9f, 0x14, 0xe9, 0x9d,
				0xef, 0x84, 0x2d, 0x8e },
		.aad_length = 8,
		.aad = { 0x4a, 0x2c, 0xbf, 0xe3, 0x00, 0x00, 0x00, 0x02 },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0xb3, 0x35, 0xf4, 0xee, 0xcf, 0xdb, 0xf8, 0x31,
			    0x82, 0x4b, 0x4c, 0x49, 0x15, 0x95, 0x6c, 0x96 }
	}
};

static crypto_test_reference_t aes_ccm_reference[] = {
	/*
	 * AES-CCM reference from RFC 3610
	 */
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf},
		.cipher_iv_length = 13,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3, 0xa4, 0xa5 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0x58, 0x8c, 0x97, 0x9a, 0x61, 0xc6, 0x63, 0xd2,
				0xf0, 0x66, 0xd0, 0xc2, 0xc0, 0xf9, 0x89, 0x80,
				0x6d, 0x5f, 0x6b, 0x61, 0xda, 0xc3, 0x84 },
		.digest_length = 8,
		.digest = { 0x17, 0xe8, 0xd1, 0x2c, 0xfd, 0xf9, 0x26, 0xe0 }
	},
	/* The rest of test vectors are generated manually, no "interesting"
	 * vectors for use cases in RFC 3610 or SP 800-38C. */
	{
		.cipher_key_length = AES192_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
				0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7},
		.cipher_iv_length = 13,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3, 0xa4, 0xa5 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0x57, 0x9f, 0xb8, 0x6e, 0xdd, 0xb4, 0xa6, 0x4a,
				0xae, 0x5f, 0xe9, 0x6d, 0xbd, 0x75, 0x44, 0x05,
				0x33, 0xa9, 0xfc, 0x3a, 0x84, 0x57, 0x36 },
		.digest_length = 8,
		.digest = { 0x67, 0xae, 0xc8, 0x0a, 0xc5, 0x88, 0xab, 0x16 }
	},
	{
		.cipher_key_length = AES256_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
				0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
				0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf},
		.cipher_iv_length = 13,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3, 0xa4, 0xa5 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0x59, 0x61, 0x55, 0x10, 0xa7, 0xc4, 0x3b, 0xfb,
				0x12, 0x3d, 0x63, 0x6b, 0x46, 0x13, 0xc0, 0x3c,
				0x6c, 0xe2, 0x69, 0x07, 0x10, 0x2a, 0x3f },
		.digest_length = 8,
		.digest = { 0xb5, 0x57, 0x2a, 0x17, 0x2d, 0x49, 0x16, 0xd5 }
	},
	{
		.cipher_key_length = AES128_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf},
		.cipher_iv_length = 11,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0xaa, 0x2d, 0x3e, 0xcb, 0xa6, 0x68, 0x63, 0x75,
				0x8f, 0x03, 0x01, 0x51, 0x16, 0xde, 0x30, 0xed,
				0x8a, 0xb5, 0x42, 0xdc, 0xfa, 0x72, 0xd0 },
		.digest_length = 8,
		.digest = { 0x63, 0xe7, 0x01, 0x5c, 0x69, 0xaf, 0xb4, 0x0c }
	},
	{
		.cipher_key_length = AES192_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
				0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7},
		.cipher_iv_length = 11,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0xee, 0x99, 0x99, 0x1e, 0xc5, 0x8f, 0xd7, 0x7e,
				0x56, 0x71, 0x16, 0x39, 0x8e, 0xc4, 0x4f, 0xcc,
				0x14, 0x45, 0x57, 0x3e, 0x38, 0x76, 0x51 },
		.digest_length = 8,
		.digest = { 0x31, 0x29, 0x47, 0xa4, 0x6d, 0x76, 0x34, 0xb4 }
	},
	{
		.cipher_key_length = AES256_KEY_LEN,
		.cipher_key = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
				0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
				0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
				0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf},
		.cipher_iv_length = 11,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xa0,
			       0xa1, 0xa2, 0xa3 },
		.aad_length = 8,
		.aad = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
		.length = 23,
		.plaintext = { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			       0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e },
		.ciphertext = { 0xfa, 0x07, 0x47, 0x5c, 0xe8, 0xc9, 0x37, 0x88,
				0x54, 0x64, 0xb8, 0xc3, 0x85, 0xbb, 0x76, 0x0b,
				0xf2, 0xc2, 0x4c, 0x4e, 0x31, 0x16, 0x77 },
		.digest_length = 8,
		.digest = { 0x88, 0x56, 0x7e, 0x19, 0x84, 0x13, 0x29, 0xc4 }
	},
};

static crypto_test_reference_t aes_gmac_reference[] = {
	{
		.auth_key_length = AES128_KEY_LEN,
		.auth_key = { 0x4c, 0x80, 0xcd, 0xef, 0xbb, 0x5d, 0x10, 0xda,
			      0x90, 0x6a, 0xc7, 0x3c, 0x36, 0x13, 0xa6, 0x34},
		.auth_iv_length = AES_GCM_IV_LEN,
		.auth_iv = { 0x22, 0x43, 0x3c, 0x64, 0x00, 0x00, 0x00, 0x00,
			     0x00, 0x00, 0x00, 0x00 },
		.length = 68,
		.plaintext = { 0x00, 0x00, 0x43, 0x21, 0x00, 0x00, 0x00, 0x07,
			       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			       0x45, 0x00, 0x00, 0x30, 0xda, 0x3a, 0x00, 0x00,
			       0x80, 0x01, 0xdf, 0x3b, 0xc0, 0xa8, 0x00, 0x05,
			       0xc0, 0xa8, 0x00, 0x01, 0x08, 0x00, 0xc6, 0xcd,
			       0x02, 0x00, 0x07, 0x00, 0x61, 0x62, 0x63, 0x64,
			       0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
			       0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
			       0x01, 0x02, 0x02, 0x01 },
		.ciphertext = { 0x00, 0x00, 0x43, 0x21, 0x00, 0x00, 0x00, 0x07,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x45, 0x00, 0x00, 0x30, 0xda, 0x3a, 0x00, 0x00,
				0x80, 0x01, 0xdf, 0x3b, 0xc0, 0xa8, 0x00, 0x05,
				0xc0, 0xa8, 0x00, 0x01, 0x08, 0x00, 0xc6, 0xcd,
				0x02, 0x00, 0x07, 0x00, 0x61, 0x62, 0x63, 0x64,
				0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
				0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
				0x01, 0x02, 0x02, 0x01 },
		.digest_length = AES_GCM_DIGEST_LEN,
		.digest = { 0xf2, 0xa9, 0xa8, 0x36, 0xe1, 0x55, 0x10, 0x6a,
			    0xa8, 0xdc, 0xd6, 0x18, 0xe4, 0x09, 0x9a, 0xaa }
	},
};

/*
 * Test vectors from SP800-38B / CSRC examples
 * 12-byte vectors are just truncated 16-byte vectors
 */
static crypto_test_reference_t aes_cmac_reference[] = {
	{
		.auth_key_length = AES128_KEY_LEN,
		.auth_key = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			      0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 16,
		.digest = { 0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44,
			    0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c },
	},
	{
		.auth_key_length = AES192_KEY_LEN,
		.auth_key = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52,
			      0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			      0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 16,
		.digest = { 0x9e, 0x99, 0xa7, 0xbf, 0x31, 0xe7, 0x10, 0x90,
			    0x06, 0x62, 0xf6, 0x5e, 0x61, 0x7c, 0x51, 0x84 },
	},
	{
		.auth_key_length = AES256_KEY_LEN,
		.auth_key = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
			      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
			      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 16,
		.digest = { 0x28, 0xa7, 0x02, 0x3f, 0x45, 0x2e, 0x8f, 0x82,
			    0xbd, 0x4b, 0xf2, 0x8d, 0x8c, 0x37, 0xc3, 0x5c },
	},
	{
		.auth_key_length = AES128_KEY_LEN,
		.auth_key = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			      0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 12,
		.digest = { 0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44,
			    0xf7, 0x9b, 0xdd, 0x9d },
	},
	{
		.auth_key_length = AES192_KEY_LEN,
		.auth_key = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52,
			      0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			      0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 12,
		.digest = { 0x9e, 0x99, 0xa7, 0xbf, 0x31, 0xe7, 0x10, 0x90,
			    0x06, 0x62, 0xf6, 0x5e },
	},
	{
		.auth_key_length = AES256_KEY_LEN,
		.auth_key = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
			      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
			      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 },
		.length = 16,
		.plaintext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
			       0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a},
		.ciphertext = { 0x6b, 0xc1, 0xbe, 0xe2,  0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11,  0x73, 0x93, 0x17, 0x2a
		},
		.digest_length = 12,
		.digest = { 0x28, 0xa7, 0x02, 0x3f, 0x45, 0x2e, 0x8f, 0x82,
			    0xbd, 0x4b, 0xf2, 0x8d },
	}
};

/*
 * Test vector from RFC 7539, sections 2.8.2, A.5
 */
static crypto_test_reference_t chacha20_poly1305_reference[] = {
	{
		.cipher_key_length = CHACHA20_POLY1305_KEY_LEN,
		.cipher_key = { 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
				0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
				0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
				0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f},
		.cipher_iv_length = CHACHA20_POLY1305_IV_LEN,
		.cipher_iv = { 0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43,
			       0x44, 0x45, 0x46, 0x47 },
		.length = 114,
		.plaintext = { 0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
			       0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
			       0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
			       0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
			       0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
			       0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
			       0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
			       0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
			       0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
			       0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
			       0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
			       0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
			       0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
			       0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
			       0x74, 0x2e },
		.ciphertext = { 0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
				0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
				0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
				0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
				0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
				0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
				0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
				0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
				0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
				0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
				0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
				0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
				0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
				0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
				0x61, 0x16 },
		.aad_length = 12,
		.aad = { 0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4,
			 0xc5, 0xc6, 0xc7 },
		.digest_length = 16,
		.digest = { 0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a,
			    0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91 }
	},
	{
		.cipher_key_length = CHACHA20_POLY1305_KEY_LEN,
		.cipher_key = { 0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a,
				0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
				0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09,
				0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0},
		.cipher_iv_length = CHACHA20_POLY1305_IV_LEN,
		.cipher_iv = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
			       0x05, 0x06, 0x07, 0x08 },
		.length = 265,
		.plaintext = { 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
			       0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x20,
			       0x61, 0x72, 0x65, 0x20, 0x64, 0x72, 0x61, 0x66,
			       0x74, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
			       0x6e, 0x74, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69,
			       0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
			       0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20,
			       0x6f, 0x66, 0x20, 0x73, 0x69, 0x78, 0x20, 0x6d,
			       0x6f, 0x6e, 0x74, 0x68, 0x73, 0x20, 0x61, 0x6e,
			       0x64, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65,
			       0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
			       0x2c, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
			       0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6f,
			       0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x64,
			       0x20, 0x62, 0x79, 0x20, 0x6f, 0x74, 0x68, 0x65,
			       0x72, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
			       0x6e, 0x74, 0x73, 0x20, 0x61, 0x74, 0x20, 0x61,
			       0x6e, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e,
			       0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
			       0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
			       0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20,
			       0x75, 0x73, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65,
			       0x72, 0x6e, 0x65, 0x74, 0x2d, 0x44, 0x72, 0x61,
			       0x66, 0x74, 0x73, 0x20, 0x61, 0x73, 0x20, 0x72,
			       0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
			       0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
			       0x6c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20,
			       0x63, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,
			       0x6d, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
			       0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x73, 0x20,
			       0x2f, 0xe2, 0x80, 0x9c, 0x77, 0x6f, 0x72, 0x6b,
			       0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67,
			       0x72, 0x65, 0x73, 0x73, 0x2e, 0x2f, 0xe2, 0x80,
			       0x9d },
		.ciphertext = { 0x64, 0xa0, 0x86, 0x15, 0x75, 0x86, 0x1a, 0xf4,
				0x60, 0xf0, 0x62, 0xc7, 0x9b, 0xe6, 0x43, 0xbd,
				0x5e, 0x80, 0x5c, 0xfd, 0x34, 0x5c, 0xf3, 0x89,
				0xf1, 0x08, 0x67, 0x0a, 0xc7, 0x6c, 0x8c, 0xb2,
				0x4c, 0x6c, 0xfc, 0x18, 0x75, 0x5d, 0x43, 0xee,
				0xa0, 0x9e, 0xe9, 0x4e, 0x38, 0x2d, 0x26, 0xb0,
				0xbd, 0xb7, 0xb7, 0x3c, 0x32, 0x1b, 0x01, 0x00,
				0xd4, 0xf0, 0x3b, 0x7f, 0x35, 0x58, 0x94, 0xcf,
				0x33, 0x2f, 0x83, 0x0e, 0x71, 0x0b, 0x97, 0xce,
				0x98, 0xc8, 0xa8, 0x4a, 0xbd, 0x0b, 0x94, 0x81,
				0x14, 0xad, 0x17, 0x6e, 0x00, 0x8d, 0x33, 0xbd,
				0x60, 0xf9, 0x82, 0xb1, 0xff, 0x37, 0xc8, 0x55,
				0x97, 0x97, 0xa0, 0x6e, 0xf4, 0xf0, 0xef, 0x61,
				0xc1, 0x86, 0x32, 0x4e, 0x2b, 0x35, 0x06, 0x38,
				0x36, 0x06, 0x90, 0x7b, 0x6a, 0x7c, 0x02, 0xb0,
				0xf9, 0xf6, 0x15, 0x7b, 0x53, 0xc8, 0x67, 0xe4,
				0xb9, 0x16, 0x6c, 0x76, 0x7b, 0x80, 0x4d, 0x46,
				0xa5, 0x9b, 0x52, 0x16, 0xcd, 0xe7, 0xa4, 0xe9,
				0x90, 0x40, 0xc5, 0xa4, 0x04, 0x33, 0x22, 0x5e,
				0xe2, 0x82, 0xa1, 0xb0, 0xa0, 0x6c, 0x52, 0x3e,
				0xaf, 0x45, 0x34, 0xd7, 0xf8, 0x3f, 0xa1, 0x15,
				0x5b, 0x00, 0x47, 0x71, 0x8c, 0xbc, 0x54, 0x6a,
				0x0d, 0x07, 0x2b, 0x04, 0xb3, 0x56, 0x4e, 0xea,
				0x1b, 0x42, 0x22, 0x73, 0xf5, 0x48, 0x27, 0x1a,
				0x0b, 0xb2, 0x31, 0x60, 0x53, 0xfa, 0x76, 0x99,
				0x19, 0x55, 0xeb, 0xd6, 0x31, 0x59, 0x43, 0x4e,
				0xce, 0xbb, 0x4e, 0x46, 0x6d, 0xae, 0x5a, 0x10,
				0x73, 0xa6, 0x72, 0x76, 0x27, 0x09, 0x7a, 0x10,
				0x49, 0xe6, 0x17, 0xd9, 0x1d, 0x36, 0x10, 0x94,
				0xfa, 0x68, 0xf0, 0xff, 0x77, 0x98, 0x71, 0x30,
				0x30, 0x5b, 0xea, 0xba, 0x2e, 0xda, 0x04, 0xdf,
				0x99, 0x7b, 0x71, 0x4d, 0x6c, 0x6f, 0x2c, 0x29,
				0xa6, 0xad, 0x5c, 0xb4, 0x02, 0x2b, 0x02, 0x70,
				0x9b },
		.aad_length = 12,
		.aad = { 0xf3, 0x33, 0x88, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00,
			 0x00, 0x4e, 0x91 },
		.digest_length = CHACHA20_POLY1305_CHECK_LEN,
		.digest = { 0xee, 0xad, 0x9d, 0x67, 0x89, 0x0c, 0xbb, 0x22,
			    0x39, 0x23, 0x36, 0xfe, 0xa1, 0x85, 0x1f, 0x38 }
	},
};

static crypto_test_reference_t hmac_md5_reference[] = {
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_MD5_96_CHECK_LEN,
		.digest = { 0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c,
			    0x13, 0xf4, 0x8e, 0xf8 },

	},
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_MD5_96_CHECK_LEN,
		.digest = { 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03,
			    0xea, 0xa8, 0x6e, 0x31 },

	},
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_MD5_96_CHECK_LEN,
		.digest = { 0x56, 0xbe, 0x34, 0x52, 0x1d, 0x14, 0x4c, 0x88,
			    0xdb, 0xb8, 0xc7, 0x33 }
	},
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_MD5_CHECK_LEN,
		.digest = { 0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c,
			    0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d },

	},
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_MD5_CHECK_LEN,
		.digest = { 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03,
			    0xea, 0xa8, 0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38 },

	},
	{
		.auth_key_length = HMAC_MD5_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_MD5_CHECK_LEN,
		.digest = { 0x56, 0xbe, 0x34, 0x52, 0x1d, 0x14, 0x4c, 0x88,
			    0xdb, 0xb8, 0xc7, 0x33, 0xf0, 0xe8, 0xb3, 0xf6 }
	}
};

static crypto_test_reference_t hmac_sha1_reference[] = {
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA1_96_CHECK_LEN,
		.digest = { 0xb6, 0x17, 0x31, 0x86, 0x55, 0x05,
			    0x72, 0x64, 0xe2, 0x8b, 0xc0, 0xb6 }
	},
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA1_96_CHECK_LEN,
		.digest = { 0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb,
			    0x2f, 0xa2, 0xd2, 0x74, 0x16, 0xd5 }
	},
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA1_96_CHECK_LEN,
		.digest = { 0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac,
			    0x11, 0xcd, 0x91, 0xa3, 0x9a, 0xf4 }
	},
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA1_CHECK_LEN,
		.digest = { 0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64,
			    0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
			    0xf1, 0x46, 0xbe, 0x00 }
	},
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA1_CHECK_LEN,
		.digest = { 0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2,
			    0xd2, 0x74, 0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c,
			    0x25, 0x9a, 0x7c, 0x79 }
	},
	{
		.auth_key_length = HMAC_SHA1_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA1_CHECK_LEN,
		.digest = { 0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd,
			    0x91, 0xa3, 0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f,
			    0x63, 0xf1, 0x75, 0xd3 }
	}
};

static crypto_test_reference_t hmac_sha256_reference[] = {
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA256_128_CHECK_LEN,
		.digest = { 0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
			    0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b }
	},
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA256_128_CHECK_LEN,
		.digest = { 0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e,
			    0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7 }
	},
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA256_128_CHECK_LEN,
		.digest = { 0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46,
			    0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7 }
	},
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA256_CHECK_LEN,
		.digest = { 0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
			    0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b,
			    0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7,
			    0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7 }
	},
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA256_CHECK_LEN,
		.digest = { 0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e,
			    0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7,
			    0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83,
			    0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43 }
	},
	{
		.auth_key_length = HMAC_SHA256_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA256_CHECK_LEN,
		.digest = { 0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46,
			    0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7,
			    0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22,
			    0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe }
	}
};

static crypto_test_reference_t hmac_sha384_reference[] = {
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA384_192_CHECK_LEN,
		.digest = { 0xaf, 0xd0, 0x39, 0x44, 0xd8, 0x48, 0x95, 0x62,
			    0x6b, 0x08, 0x25, 0xf4, 0xab, 0x46, 0x90, 0x7f,
			    0x15, 0xf9, 0xda, 0xdb, 0xe4, 0x10, 0x1e, 0xc6 }
	},
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA384_192_CHECK_LEN,
		.digest = { 0xaf, 0x45, 0xd2, 0xe3, 0x76, 0x48, 0x40, 0x31,
			    0x61, 0x7f, 0x78, 0xd2, 0xb5, 0x8a, 0x6b, 0x1b,
			    0x9c, 0x7e, 0xf4, 0x64, 0xf5, 0xa0, 0x1b, 0x47 }
	},
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA384_192_CHECK_LEN,
		.digest = { 0x88, 0x06, 0x26, 0x08, 0xd3, 0xe6, 0xad, 0x8a,
			    0x0a, 0xa2, 0xac, 0xe0, 0x14, 0xc8, 0xa8, 0x6f,
			    0x0a, 0xa6, 0x35, 0xd9, 0x47, 0xac, 0x9f, 0xeb }
	},
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA384_CHECK_LEN,
		.digest = { 0xaf, 0xd0, 0x39, 0x44, 0xd8, 0x48, 0x95, 0x62,
			    0x6b, 0x08, 0x25, 0xf4, 0xab, 0x46, 0x90, 0x7f,
			    0x15, 0xf9, 0xda, 0xdb, 0xe4, 0x10, 0x1e, 0xc6,
			    0x82, 0xaa, 0x03, 0x4c, 0x7c, 0xeb, 0xc5, 0x9c,
			    0xfa, 0xea, 0x9e, 0xa9, 0x07, 0x6e, 0xde, 0x7f,
			    0x4a, 0xf1, 0x52, 0xe8, 0xb2, 0xfa, 0x9c, 0xb6 }
	},
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA384_CHECK_LEN,
		.digest = { 0xaf, 0x45, 0xd2, 0xe3, 0x76, 0x48, 0x40, 0x31,
			    0x61, 0x7f, 0x78, 0xd2, 0xb5, 0x8a, 0x6b, 0x1b,
			    0x9c, 0x7e, 0xf4, 0x64, 0xf5, 0xa0, 0x1b, 0x47,
			    0xe4, 0x2e, 0xc3, 0x73, 0x63, 0x22, 0x44, 0x5e,
			    0x8e, 0x22, 0x40, 0xca, 0x5e, 0x69, 0xe2, 0xc7,
			    0x8b, 0x32, 0x39, 0xec, 0xfa, 0xb2, 0x16, 0x49 }
	},
	{
		.auth_key_length = HMAC_SHA384_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA384_CHECK_LEN,
		.digest = {0x88, 0x06, 0x26, 0x08, 0xd3, 0xe6, 0xad, 0x8a,
			    0x0a, 0xa2, 0xac, 0xe0, 0x14, 0xc8, 0xa8, 0x6f,
			    0x0a, 0xa6, 0x35, 0xd9, 0x47, 0xac, 0x9f, 0xeb,
			    0xe8, 0x3e, 0xf4, 0xe5, 0x59, 0x66, 0x14, 0x4b,
			    0x2a, 0x5a, 0xb3, 0x9d, 0xc1, 0x38, 0x14, 0xb9,
			    0x4e, 0x3a, 0xb6, 0xe1, 0x01, 0xa3, 0x4f, 0x27 }
	}
};

static crypto_test_reference_t hmac_sha512_reference[] = {
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA512_256_CHECK_LEN,
		.digest = { 0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d,
			    0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d, 0x6c, 0xb0,
			    0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78,
			    0x7a, 0xd0, 0xb3, 0x05, 0x45, 0xe1, 0x7c, 0xde }
	},
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA512_256_CHECK_LEN,
		.digest = { 0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2,
			    0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56, 0xe0, 0xa3,
			    0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6,
			    0x10, 0x27, 0x0c, 0xd7, 0xea, 0x25, 0x05, 0x54 }
	},
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA512_256_CHECK_LEN,
		.digest = { 0xfa, 0x73, 0xb0, 0x08, 0x9d, 0x56, 0xa2, 0x84,
			    0xef, 0xb0, 0xf0, 0x75, 0x6c, 0x89, 0x0b, 0xe9,
			    0xb1, 0xb5, 0xdb, 0xdd, 0x8e, 0xe8, 0x1a, 0x36,
			    0x55, 0xf8, 0x3e, 0x33, 0xb2, 0x27, 0x9d, 0x39 }
	},
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		.auth_key = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			      0x0b, 0x0b, 0x0b, 0x0b },
		.length = 8,
		/* "Hi There" */
		.plaintext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.ciphertext = { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},
		.digest_length = HMAC_SHA512_CHECK_LEN,
		.digest = { 0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d,
			    0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d, 0x6c, 0xb0,
			    0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78,
			    0x7a, 0xd0, 0xb3, 0x05, 0x45, 0xe1, 0x7c, 0xde,
			    0xda, 0xa8, 0x33, 0xb7, 0xd6, 0xb8, 0xa7, 0x02,
			    0x03, 0x8b, 0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4,
			    0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70,
			    0x2e, 0x69, 0x6c, 0x20, 0x3a, 0x12, 0x68, 0x54 }
	},
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		/* "Jefe" */
		.auth_key = { 0x4a, 0x65, 0x66, 0x65 },
		.length = 28,
		/* what do ya want for nothing?*/
		.plaintext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
			       0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
			       0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
			       0x69, 0x6e, 0x67, 0x3f },
		.ciphertext = { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
				0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
				0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
				0x69, 0x6e, 0x67, 0x3f },
		.digest_length = HMAC_SHA512_CHECK_LEN,
		.digest = { 0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2,
			    0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56, 0xe0, 0xa3,
			    0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6,
			    0x10, 0x27, 0x0c, 0xd7, 0xea, 0x25, 0x05, 0x54,
			    0x97, 0x58, 0xbf, 0x75, 0xc0, 0x5a, 0x99, 0x4a,
			    0x6d, 0x03, 0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd,
			    0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b,
			    0x63, 0x6e, 0x07, 0x0a, 0x38, 0xbc, 0xe7, 0x37 }
	},
	{
		.auth_key_length = HMAC_SHA512_KEY_LEN,
		.auth_key = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			      0xaa, 0xaa, 0xaa, 0xaa },
		.length = 50,
		.plaintext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
			       0xdd, 0xdd },
		.ciphertext = { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
				0xdd, 0xdd },
		.digest_length = HMAC_SHA512_CHECK_LEN,
		.digest = { 0xfa, 0x73, 0xb0, 0x08, 0x9d, 0x56, 0xa2, 0x84,
			    0xef, 0xb0, 0xf0, 0x75, 0x6c, 0x89, 0x0b, 0xe9,
			    0xb1, 0xb5, 0xdb, 0xdd, 0x8e, 0xe8, 0x1a, 0x36,
			    0x55, 0xf8, 0x3e, 0x33, 0xb2, 0x27, 0x9d, 0x39,
			    0xbf, 0x3e, 0x84, 0x82, 0x79, 0xa7, 0x22, 0xc8,
			    0x06, 0xb4, 0x85, 0xa4, 0x7e, 0x67, 0xc8, 0x07,
			    0xb9, 0x46, 0xa3, 0x37, 0xbe, 0xe8, 0x94, 0x26,
			    0x74, 0x27, 0x88, 0x59, 0xe1, 0x32, 0x92, 0xfb }
	}
};

static crypto_test_reference_t aes_xcbc_reference[] = {
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 3,
		.plaintext = { 0x00, 0x01, 0x02 },
		.ciphertext = { 0x00, 0x01, 0x02 },
		.digest_length = AES_XCBC_MAC_96_CHECK_LEN,
		.digest = { 0x5b, 0x37, 0x65, 0x80, 0xae, 0x2f, 0x19, 0xaf,
			    0xe7, 0x21, 0x9c, 0xee }
	},
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 16,
		.plaintext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.ciphertext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.digest_length = AES_XCBC_MAC_96_CHECK_LEN,
		.digest = { 0xd2, 0xa2, 0x46, 0xfa, 0x34, 0x9b, 0x68, 0xa7,
			    0x99, 0x98, 0xa4, 0x39 }
	},
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 20,
		.plaintext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			      0x10, 0x11, 0x12, 0x13 },
		.ciphertext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			      0x10, 0x11, 0x12, 0x13 },
		.digest_length = AES_XCBC_MAC_96_CHECK_LEN,
		.digest = {  0x47, 0xf5, 0x1b, 0x45, 0x64, 0x96, 0x62, 0x15,
			0xb8, 0x98, 0x5c, 0x63 }
	},
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 3,
		.plaintext = { 0x00, 0x01, 0x02 },
		.ciphertext = { 0x00, 0x01, 0x02 },
		.digest_length = AES_XCBC_MAC_CHECK_LEN,
		.digest = { 0x5b, 0x37, 0x65, 0x80, 0xae, 0x2f, 0x19, 0xaf,
			    0xe7, 0x21, 0x9c, 0xee, 0xf1, 0x72, 0x75, 0x6f }
	},
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 16,
		.plaintext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.ciphertext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.digest_length = AES_XCBC_MAC_CHECK_LEN,
		.digest = { 0xd2, 0xa2, 0x46, 0xfa, 0x34, 0x9b, 0x68, 0xa7,
			    0x99, 0x98, 0xa4, 0x39, 0x4f, 0xf7, 0xa2, 0x63 }
	},
	{
		.auth_key_length = AES_XCBC_MAC_KEY_LEN,
		.auth_key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		.length = 20,
		.plaintext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			      0x10, 0x11, 0x12, 0x13 },
		.ciphertext = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			      0x10, 0x11, 0x12, 0x13 },
		.digest_length = AES_XCBC_MAC_CHECK_LEN,
		.digest = {  0x47, 0xf5, 0x1b, 0x45, 0x64, 0x96, 0x62, 0x15,
			0xb8, 0x98, 0x5c, 0x63, 0x05, 0x5e, 0xd3, 0x08 }
	}
};

/*
 * Kasumi F8 and F9 test vectors are taken from
 * 3GPP TS 35.203 V9.0.0 (2009-12)
 * 3rd Generation Partnership Project;
 * Technical Specification Group Services and System Aspects;
 * 3G Security;
 * Specification of the 3GPP Confidentiality
 * and Integrity Algorithms;
 * Document 3: Implementors' Test Data
 * (Release 9)
 */
static crypto_test_reference_t kasumi_f8_reference[] = {
	{
		.bit_mode = true,
		.cipher_key_length = KASUMI_F8_KEY_LEN,
		.cipher_key = { 0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
				0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48},
		.cipher_iv_length = KASUMI_F8_IV_LEN,
		.cipher_iv = { 0x72, 0xa4, 0xf2, 0x0f, 0x64, 0x00, 0x00, 0x00 },
		.length = 798, /* 100 bytes */
		.plaintext = {  0x7e, 0xc6, 0x12, 0x72, 0x74, 0x3b, 0xf1, 0x61,
				0x47, 0x26, 0x44, 0x6a, 0x6c, 0x38, 0xce, 0xd1,
				0x66, 0xf6, 0xca, 0x76, 0xeb, 0x54, 0x30, 0x04,
				0x42, 0x86, 0x34, 0x6c, 0xef, 0x13, 0x0f, 0x92,
				0x92, 0x2b, 0x03, 0x45, 0x0d, 0x3a, 0x99, 0x75,
				0xe5, 0xbd, 0x2e, 0xa0, 0xeb, 0x55, 0xad, 0x8e,
				0x1b, 0x19, 0x9e, 0x3e, 0xc4, 0x31, 0x60, 0x20,
				0xe9, 0xa1, 0xb2, 0x85, 0xe7, 0x62, 0x79, 0x53,
				0x59, 0xb7, 0xbd, 0xfd, 0x39, 0xbe, 0xf4, 0xb2,
				0x48, 0x45, 0x83, 0xd5, 0xaf, 0xe0, 0x82, 0xae,
				0xe6, 0x38, 0xbf, 0x5f, 0xd5, 0xa6, 0x06, 0x19,
				0x39, 0x01, 0xa0, 0x8f, 0x4a, 0xb4, 0x1a, 0xab,
				0x9b, 0x13, 0x48, 0x80 },
		.ciphertext = { 0xd1, 0xe2, 0xde, 0x70, 0xee, 0xf8, 0x6c, 0x69,
				0x64, 0xfb, 0x54, 0x2b, 0xc2, 0xd4, 0x60, 0xaa,
				0xbf, 0xaa, 0x10, 0xa4, 0xa0, 0x93, 0x26, 0x2b,
				0x7d, 0x19, 0x9e, 0x70, 0x6f, 0xc2, 0xd4, 0x89,
				0x15, 0x53, 0x29, 0x69, 0x10, 0xf3, 0xa9, 0x73,
				0x01, 0x26, 0x82, 0xe4, 0x1c, 0x4e, 0x2b, 0x02,
				0xbe, 0x20, 0x17, 0xb7, 0x25, 0x3b, 0xbf, 0x93,
				0x09, 0xde, 0x58, 0x19, 0xcb, 0x42, 0xe8, 0x19,
				0x56, 0xf4, 0xc9, 0x9b, 0xc9, 0x76, 0x5c, 0xaf,
				0x53, 0xb1, 0xd0, 0xbb, 0x82, 0x79, 0x82, 0x6a,
				0xdb, 0xbc, 0x55, 0x22, 0xe9, 0x15, 0xc1, 0x20,
				0xa6, 0x18, 0xa5, 0xa7, 0xf5, 0xe8, 0x97, 0x08,
				0x93, 0x39, 0x65, 0x0f }
	},
	{
		.bit_mode = true,
		.cipher_key_length = KASUMI_F8_KEY_LEN,
		.cipher_key = { 0xef, 0xa8, 0xb2, 0x22, 0x9e, 0x72, 0x0c, 0x2a,
				0x7c, 0x36, 0xea, 0x55, 0xe9, 0x60, 0x56, 0x95},
		.cipher_iv_length = KASUMI_F8_IV_LEN,
		.cipher_iv = { 0xe2, 0x8b, 0xcf, 0x7b, 0xc0, 0x00, 0x00, 0x00 },
		.length = 510, /* 64 bytes */
		.plaintext = {  0x10, 0x11, 0x12, 0x31, 0xe0, 0x60, 0x25, 0x3a,
				0x43, 0xfd, 0x3f, 0x57, 0xe3, 0x76, 0x07, 0xab,
				0x28, 0x27, 0xb5, 0x99, 0xb6, 0xb1, 0xbb, 0xda,
				0x37, 0xa8, 0xab, 0xcc, 0x5a, 0x8c, 0x55, 0x0d,
				0x1b, 0xfb, 0x2f, 0x49, 0x46, 0x24, 0xfb, 0x50,
				0x36, 0x7f, 0xa3, 0x6c, 0xe3, 0xbc, 0x68, 0xf1,
				0x1c, 0xf9, 0x3b, 0x15, 0x10, 0x37, 0x6b, 0x02,
				0x13, 0x0f, 0x81, 0x2a, 0x9f, 0xa1, 0x69, 0xd8},
		.ciphertext = { 0x3d, 0xea, 0xcc, 0x7c, 0x15, 0x82, 0x1c, 0xaa,
				0x89, 0xee, 0xca, 0xde, 0x9b, 0x5b, 0xd3, 0x61,
				0x4b, 0xd0, 0xc8, 0x41, 0x9d, 0x71, 0x03, 0x85,
				0xdd, 0xbe, 0x58, 0x49, 0xef, 0x1b, 0xac, 0x5a,
				0xe8, 0xb1, 0x4a, 0x5b, 0x0a, 0x67, 0x41, 0x52,
				0x1e, 0xb4, 0xe0, 0x0b, 0xb9, 0xec, 0xf3, 0xe9,
				0xf7, 0xcc, 0xb9, 0xca, 0xe7, 0x41, 0x52, 0xd7,
				0xf4, 0xe2, 0xa0, 0x34, 0xb6, 0xea, 0x00, 0xec }
	}
};

static crypto_test_reference_t kasumi_f9_reference[] = {
	{
		.bit_mode = true,
		.auth_key_length = KASUMI_F9_KEY_LEN,
		.auth_key = { 0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
			      0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48 },
		.auth_iv_length = KASUMI_F9_IV_LEN,
		.auth_iv = { 0x38, 0xa6, 0xf0, 0x56, 0x05, 0xd2, 0xec, 0x49,
			     0x00, },
		.length = 189, /* 24 bytes */
		.plaintext = {  0x6b, 0x22, 0x77, 0x37, 0x29, 0x6f, 0x39, 0x3c,
				0x80, 0x79, 0x35, 0x3e, 0xdc, 0x87, 0xe2, 0xe8,
				0x05, 0xd2, 0xec, 0x49, 0xa4, 0xf2, 0xd8, 0xe0},
		.ciphertext = { 0x6b, 0x22, 0x77, 0x37, 0x29, 0x6f, 0x39, 0x3c,
				0x80, 0x79, 0x35, 0x3e, 0xdc, 0x87, 0xe2, 0xe8,
				0x05, 0xd2, 0xec, 0x49, 0xa4, 0xf2, 0xd8, 0xe0},
		.digest_length = KASUMI_F9_DIGEST_LEN,
		.digest = { 0xf6, 0x3b, 0xd7, 0x2c }
	},
	{
		.bit_mode = true,
		.auth_key_length = KASUMI_F9_KEY_LEN,
		.auth_key = { 0xd4, 0x2f, 0x68, 0x24, 0x28, 0x20, 0x1c, 0xaf,
			      0xcd, 0x9f, 0x97, 0x94, 0x5e, 0x6d, 0xe7, 0xb7 },
		.auth_iv_length = KASUMI_F9_IV_LEN,
		.auth_iv = { 0x3e, 0xdc, 0x87, 0xe2, 0xa4, 0xf2, 0xd8, 0xe2,
			     0x01, },
		.length = 254, /* 32 bytes */
		.plaintext = {  0xb5, 0x92, 0x43, 0x84, 0x32, 0x8a, 0x4a, 0xe0,
				0x0b, 0x73, 0x71, 0x09, 0xf8, 0xb6, 0xc8, 0xdd,
				0x2b, 0x4d, 0xb6, 0x3d, 0xd5, 0x33, 0x98, 0x1c,
				0xeb, 0x19, 0xaa, 0xd5, 0x2a, 0x5b, 0x2b, 0xc0},
		.ciphertext = { 0xb5, 0x92, 0x43, 0x84, 0x32, 0x8a, 0x4a, 0xe0,
				0x0b, 0x73, 0x71, 0x09, 0xf8, 0xb6, 0xc8, 0xdd,
				0x2b, 0x4d, 0xb6, 0x3d, 0xd5, 0x33, 0x98, 0x1c,
				0xeb, 0x19, 0xaa, 0xd5, 0x2a, 0x5b, 0x2b, 0xc0},
		.digest_length = KASUMI_F9_DIGEST_LEN,
		.digest = { 0xa9, 0xda, 0xf1, 0xff }
	}
};

/*
 * Snow3G UEA2 & UIA2 test vectors are taken from
 * Specification of the 3GPP Confidentiality and
 * Integrity Algorithms UEA2 & UIA2
 * Document 3: Implementors’ Test Data
 * Version: 1.1
 * Date: 25 th October 2012
 */
static crypto_test_reference_t snow3g_uea2_reference[] = {
	{
		.bit_mode = true,
		.cipher_key_length = SNOW3G_UEA2_KEY_LEN,
		.cipher_key = { 0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
				0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48},
		.cipher_iv_length = SNOW3G_UEA2_IV_LEN,
		.cipher_iv = { 0x72, 0xa4, 0xf2, 0x0f, 0x64, 0x00, 0x00, 0x00,
			       0x72, 0xa4, 0xf2, 0x0f, 0x64, 0x00, 0x00, 0x00 },
		.length = 798, /* 100 bytes */
		.plaintext = {  0x7e, 0xc6, 0x12, 0x72, 0x74, 0x3b, 0xf1, 0x61,
				0x47, 0x26, 0x44, 0x6a, 0x6c, 0x38, 0xce, 0xd1,
				0x66, 0xf6, 0xca, 0x76, 0xeb, 0x54, 0x30, 0x04,
				0x42, 0x86, 0x34, 0x6c, 0xef, 0x13, 0x0f, 0x92,
				0x92, 0x2b, 0x03, 0x45, 0x0d, 0x3a, 0x99, 0x75,
				0xe5, 0xbd, 0x2e, 0xa0, 0xeb, 0x55, 0xad, 0x8e,
				0x1b, 0x19, 0x9e, 0x3e, 0xc4, 0x31, 0x60, 0x20,
				0xe9, 0xa1, 0xb2, 0x85, 0xe7, 0x62, 0x79, 0x53,
				0x59, 0xb7, 0xbd, 0xfd, 0x39, 0xbe, 0xf4, 0xb2,
				0x48, 0x45, 0x83, 0xd5, 0xaf, 0xe0, 0x82, 0xae,
				0xe6, 0x38, 0xbf, 0x5f, 0xd5, 0xa6, 0x06, 0x19,
				0x39, 0x01, 0xa0, 0x8f, 0x4a, 0xb4, 0x1a, 0xab,
				0x9b, 0x13, 0x48, 0x80 },
		.ciphertext = { 0x8c, 0xeb, 0xa6, 0x29, 0x43, 0xdc, 0xed, 0x3a,
				0x09, 0x90, 0xb0, 0x6e, 0xa1, 0xb0, 0xa2, 0xc4,
				0xfb, 0x3c, 0xed, 0xc7, 0x1b, 0x36, 0x9f, 0x42,
				0xba, 0x64, 0xc1, 0xeb, 0x66, 0x65, 0xe7, 0x2a,
				0xa1, 0xc9, 0xbb, 0x0d, 0xea, 0xa2, 0x0f, 0xe8,
				0x60, 0x58, 0xb8, 0xba, 0xee, 0x2c, 0x2e, 0x7f,
				0x0b, 0xec, 0xce, 0x48, 0xb5, 0x29, 0x32, 0xa5,
				0x3c, 0x9d, 0x5f, 0x93, 0x1a, 0x3a, 0x7c, 0x53,
				0x22, 0x59, 0xaf, 0x43, 0x25, 0xe2, 0xa6, 0x5e,
				0x30, 0x84, 0xad, 0x5f, 0x6a, 0x51, 0x3b, 0x7b,
				0xdd, 0xc1, 0xb6, 0x5f, 0x0a, 0xa0, 0xd9, 0x7a,
				0x05, 0x3d, 0xb5, 0x5a, 0x88, 0xc4, 0xc4, 0xf9,
				0x60, 0x5e, 0x41, 0x40 }
	},
	{
		.bit_mode = true,
		.cipher_key_length = SNOW3G_UEA2_KEY_LEN,
		.cipher_key = { 0xef, 0xa8, 0xb2, 0x22, 0x9e, 0x72, 0x0c, 0x2a,
				0x7c, 0x36, 0xea, 0x55, 0xe9, 0x60, 0x56, 0x95},
		.cipher_iv_length = SNOW3G_UEA2_IV_LEN,
		.cipher_iv = { 0xe2, 0x8b, 0xcf, 0x7b, 0xc0, 0x00, 0x00, 0x00,
			       0xe2, 0x8b, 0xcf, 0x7b, 0xc0, 0x00, 0x00, 0x00 },
		.length = 510, /* 64 bytes */
		.plaintext = {  0x10, 0x11, 0x12, 0x31, 0xe0, 0x60, 0x25, 0x3a,
				0x43, 0xfd, 0x3f, 0x57, 0xe3, 0x76, 0x07, 0xab,
				0x28, 0x27, 0xb5, 0x99, 0xb6, 0xb1, 0xbb, 0xda,
				0x37, 0xa8, 0xab, 0xcc, 0x5a, 0x8c, 0x55, 0x0d,
				0x1b, 0xfb, 0x2f, 0x49, 0x46, 0x24, 0xfb, 0x50,
				0x36, 0x7f, 0xa3, 0x6c, 0xe3, 0xbc, 0x68, 0xf1,
				0x1c, 0xf9, 0x3b, 0x15, 0x10, 0x37, 0x6b, 0x02,
				0x13, 0x0f, 0x81, 0x2a, 0x9f, 0xa1, 0x69, 0xd8},
		.ciphertext = { 0xe0, 0xda, 0x15, 0xca, 0x8e, 0x25, 0x54, 0xf5,
				0xe5, 0x6c, 0x94, 0x68, 0xdc, 0x6c, 0x7c, 0x12,
				0x9c, 0x56, 0x8a, 0xa5, 0x03, 0x23, 0x17, 0xe0,
				0x4e, 0x07, 0x29, 0x64, 0x6c, 0xab, 0xef, 0xa6,
				0x89, 0x86, 0x4c, 0x41, 0x0f, 0x24, 0xf9, 0x19,
				0xe6, 0x1e, 0x3d, 0xfd, 0xfa, 0xd7, 0x7e, 0x56,
				0x0d, 0xb0, 0xa9, 0xcd, 0x36, 0xc3, 0x4a, 0xe4,
				0x18, 0x14, 0x90, 0xb2, 0x9f, 0x5f, 0xa2, 0xfc }
	}
};

static crypto_test_reference_t snow3g_uia2_reference[] = {
	{
		.bit_mode = true,
		.auth_key_length = SNOW3G_UIA2_KEY_LEN,
		.auth_key = { 0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
			      0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48 },
		.auth_iv_length = SNOW3G_UIA2_IV_LEN,
		.auth_iv = { 0x38, 0xa6, 0xf0, 0x56, 0x05, 0xd2, 0xec, 0x49,
			     0x38, 0xa6, 0xf0, 0x56, 0x05, 0xd2, 0xec, 0x49 },
		.length = 189, /* 24 bytes */
		.plaintext = {  0x6b, 0x22, 0x77, 0x37, 0x29, 0x6f, 0x39, 0x3c,
				0x80, 0x79, 0x35, 0x3e, 0xdc, 0x87, 0xe2, 0xe8,
				0x05, 0xd2, 0xec, 0x49, 0xa4, 0xf2, 0xd8, 0xe0},
		.ciphertext = { 0x6b, 0x22, 0x77, 0x37, 0x29, 0x6f, 0x39, 0x3c,
				0x80, 0x79, 0x35, 0x3e, 0xdc, 0x87, 0xe2, 0xe8,
				0x05, 0xd2, 0xec, 0x49, 0xa4, 0xf2, 0xd8, 0xe0},
		.digest_length = SNOW3G_UIA2_DIGEST_LEN,
		.digest = { 0x2b, 0xce, 0x18, 0x20 }
	},
	{
		.bit_mode = true,
		.auth_key_length = SNOW3G_UIA2_KEY_LEN,
		.auth_key = { 0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9,
			      0x1e, 0x26, 0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
		.auth_iv_length = SNOW3G_UIA2_IV_LEN,
		.auth_iv = { 0x14, 0x79, 0x3e, 0x41, 0x03, 0x97, 0xe8, 0xfd,
			0x94, 0x79, 0x3e, 0x41, 0x03, 0x97, 0x68, 0xfd },
		.length = 384, /* 48 bytes */
		.plaintext = {  0xd0, 0xa7, 0xd4, 0x63, 0xdf, 0x9f, 0xb2, 0xb2,
				0x78, 0x83, 0x3f, 0xa0, 0x2e, 0x23, 0x5a, 0xa1,
				0x72, 0xbd, 0x97, 0x0c, 0x14, 0x73, 0xe1, 0x29,
				0x07, 0xfb, 0x64, 0x8b, 0x65, 0x99, 0xaa, 0xa0,
				0xb2, 0x4a, 0x03, 0x86, 0x65, 0x42, 0x2b, 0x20,
				0xa4, 0x99, 0x27, 0x6a, 0x50, 0x42, 0x70, 0x09},
		.ciphertext = { 0xd0, 0xa7, 0xd4, 0x63, 0xdf, 0x9f, 0xb2, 0xb2,
				0x78, 0x83, 0x3f, 0xa0, 0x2e, 0x23, 0x5a, 0xa1,
				0x72, 0xbd, 0x97, 0x0c, 0x14, 0x73, 0xe1, 0x29,
				0x07, 0xfb, 0x64, 0x8b, 0x65, 0x99, 0xaa, 0xa0,
				0xb2, 0x4a, 0x03, 0x86, 0x65, 0x42, 0x2b, 0x20,
				0xa4, 0x99, 0x27, 0x6a, 0x50, 0x42, 0x70, 0x09},
		.digest_length = SNOW3G_UIA2_DIGEST_LEN,
		.digest = { 0x38, 0xb5, 0x54, 0xc0 }
	},
	{
		.bit_mode = false,
		.auth_key_length = SNOW3G_UIA2_KEY_LEN,
		.auth_key = { 0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9,
			      0x1e, 0x26, 0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
		.auth_iv_length = SNOW3G_UIA2_IV_LEN,
		.auth_iv = { 0x14, 0x79, 0x3e, 0x41, 0x03, 0x97, 0xe8, 0xfd,
			0x94, 0x79, 0x3e, 0x41, 0x03, 0x97, 0x68, 0xfd },
		.length = 384, /* 48 bytes */
		.plaintext = {  0xd0, 0xa7, 0xd4, 0x63, 0xdf, 0x9f, 0xb2, 0xb2,
				0x78, 0x83, 0x3f, 0xa0, 0x2e, 0x23, 0x5a, 0xa1,
				0x72, 0xbd, 0x97, 0x0c, 0x14, 0x73, 0xe1, 0x29,
				0x07, 0xfb, 0x64, 0x8b, 0x65, 0x99, 0xaa, 0xa0,
				0xb2, 0x4a, 0x03, 0x86, 0x65, 0x42, 0x2b, 0x20,
				0xa4, 0x99, 0x27, 0x6a, 0x50, 0x42, 0x70, 0x09},
		.ciphertext = { 0xd0, 0xa7, 0xd4, 0x63, 0xdf, 0x9f, 0xb2, 0xb2,
				0x78, 0x83, 0x3f, 0xa0, 0x2e, 0x23, 0x5a, 0xa1,
				0x72, 0xbd, 0x97, 0x0c, 0x14, 0x73, 0xe1, 0x29,
				0x07, 0xfb, 0x64, 0x8b, 0x65, 0x99, 0xaa, 0xa0,
				0xb2, 0x4a, 0x03, 0x86, 0x65, 0x42, 0x2b, 0x20,
				0xa4, 0x99, 0x27, 0x6a, 0x50, 0x42, 0x70, 0x09},
		.digest_length = SNOW3G_UIA2_DIGEST_LEN,
		.digest = { 0x38, 0xb5, 0x54, 0xc0 }
	},
};

/*
 * ZUC EEA3 and EIA3 test vectors from
 * Specification of the 3GPP Confidentiality and Integrity
 * Algorithms 128-EEA3 & 128-EIA3
 * Document 3: Implementor’s Test Data
 * Version: 1.1
 * Date: 4 th Jan. 2011
 */
static crypto_test_reference_t zuc_eea3_reference[] = {
	{
		.bit_mode = true,
		.cipher_key_length = ZUC_EEA3_KEY_LEN,
		.cipher_key = { 0x17, 0x3d, 0x14, 0xba, 0x50, 0x03, 0x73, 0x1d,
				0x7a, 0x60, 0x04, 0x94, 0x70, 0xf0, 0x0a, 0x29},
		.cipher_iv_length = ZUC_EEA3_IV_LEN,
		.cipher_iv = { 0x66, 0x03, 0x54, 0x92, 0x78, 0x00, 0x00, 0x00,
			0x66, 0x03, 0x54, 0x92, 0x78, 0x00, 0x00, 0x00 },
		.length = 193, /* 25 bytes */
		.plaintext = {  0x6c, 0xf6, 0x53, 0x40, 0x73, 0x55, 0x52, 0xab,
				0x0c, 0x97, 0x52, 0xfa, 0x6f, 0x90, 0x25, 0xfe,
				0x0b, 0xd6, 0x75, 0xd9, 0x00, 0x58, 0x75, 0xb2,
				0x00 },
		.ciphertext = { 0xa6, 0xc8, 0x5f, 0xc6, 0x6a, 0xfb, 0x85, 0x33,
				0xaa, 0xfc, 0x25, 0x18, 0xdf, 0xe7, 0x84, 0x94,
				0x0e, 0xe1, 0xe4, 0xb0, 0x30, 0x23, 0x8c, 0xc8,
				0x00 }
	},
	{
		.bit_mode = true,
		.cipher_key_length = ZUC_EIA3_KEY_LEN,
		.cipher_key = { 0xe5, 0xbd, 0x3e, 0xa0, 0xeb, 0x55, 0xad, 0xe8,
				0x66, 0xc6, 0xac, 0x58, 0xbd, 0x54, 0x30, 0x2a},
		.cipher_iv_length = ZUC_EEA3_IV_LEN,
		.cipher_iv = { 0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00,
			0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00 },
		.length = 800, /* 100 bytes */
		.plaintext = {  0x14, 0xa8, 0xef, 0x69, 0x3d, 0x67, 0x85, 0x07,
				0xbb, 0xe7, 0x27, 0x0a, 0x7f, 0x67, 0xff, 0x50,
				0x06, 0xc3, 0x52, 0x5b, 0x98, 0x07, 0xe4, 0x67,
				0xc4, 0xe5, 0x60, 0x00, 0xba, 0x33, 0x8f, 0x5d,
				0x42, 0x95, 0x59, 0x03, 0x67, 0x51, 0x82, 0x22,
				0x46, 0xc8, 0x0d, 0x3b, 0x38, 0xf0, 0x7f, 0x4b,
				0xe2, 0xd8, 0xff, 0x58, 0x05, 0xf5, 0x13, 0x22,
				0x29, 0xbd, 0xe9, 0x3b, 0xbb, 0xdc, 0xaf, 0x38,
				0x2b, 0xf1, 0xee, 0x97, 0x2f, 0xbf, 0x99, 0x77,
				0xba, 0xda, 0x89, 0x45, 0x84, 0x7a, 0x2a, 0x6c,
				0x9a, 0xd3, 0x4a, 0x66, 0x75, 0x54, 0xe0, 0x4d,
				0x1f, 0x7f, 0xa2, 0xc3, 0x32, 0x41, 0xbd, 0x8f,
				0x01, 0xba, 0x22, 0x0d },
		.ciphertext = { 0x13, 0x1d, 0x43, 0xe0, 0xde, 0xa1, 0xbe, 0x5c,
				0x5a, 0x1b, 0xfd, 0x97, 0x1d, 0x85, 0x2c, 0xbf,
				0x71, 0x2d, 0x7b, 0x4f, 0x57, 0x96, 0x1f, 0xea,
				0x32, 0x08, 0xaf, 0xa8, 0xbc, 0xa4, 0x33, 0xf4,
				0x56, 0xad, 0x09, 0xc7, 0x41, 0x7e, 0x58, 0xbc,
				0x69, 0xcf, 0x88, 0x66, 0xd1, 0x35, 0x3f, 0x74,
				0x86, 0x5e, 0x80, 0x78, 0x1d, 0x20, 0x2d, 0xfb,
				0x3e, 0xcf, 0xf7, 0xfc, 0xbc, 0x3b, 0x19, 0x0f,
				0xe8, 0x2a, 0x20, 0x4e, 0xd0, 0xe3, 0x50, 0xfc,
				0x0f, 0x6f, 0x26, 0x13, 0xb2, 0xf2, 0xbc, 0xa6,
				0xdf, 0x5a, 0x47, 0x3a, 0x57, 0xa4, 0xa0, 0x0d,
				0x98, 0x5e, 0xba, 0xd8, 0x80, 0xd6, 0xf2, 0x38,
				0x64, 0xa0, 0x7b, 0x01 }
	},
	{
		.bit_mode = false,
		.cipher_key_length = ZUC_EIA3_KEY_LEN,
		.cipher_key = { 0xe5, 0xbd, 0x3e, 0xa0, 0xeb, 0x55, 0xad, 0xe8,
				0x66, 0xc6, 0xac, 0x58, 0xbd, 0x54, 0x30, 0x2a},
		.cipher_iv_length = ZUC_EEA3_IV_LEN,
		.cipher_iv = { 0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00,
			0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00 },
		.length = 800, /* 100 bytes */
		.plaintext = {  0x14, 0xa8, 0xef, 0x69, 0x3d, 0x67, 0x85, 0x07,
				0xbb, 0xe7, 0x27, 0x0a, 0x7f, 0x67, 0xff, 0x50,
				0x06, 0xc3, 0x52, 0x5b, 0x98, 0x07, 0xe4, 0x67,
				0xc4, 0xe5, 0x60, 0x00, 0xba, 0x33, 0x8f, 0x5d,
				0x42, 0x95, 0x59, 0x03, 0x67, 0x51, 0x82, 0x22,
				0x46, 0xc8, 0x0d, 0x3b, 0x38, 0xf0, 0x7f, 0x4b,
				0xe2, 0xd8, 0xff, 0x58, 0x05, 0xf5, 0x13, 0x22,
				0x29, 0xbd, 0xe9, 0x3b, 0xbb, 0xdc, 0xaf, 0x38,
				0x2b, 0xf1, 0xee, 0x97, 0x2f, 0xbf, 0x99, 0x77,
				0xba, 0xda, 0x89, 0x45, 0x84, 0x7a, 0x2a, 0x6c,
				0x9a, 0xd3, 0x4a, 0x66, 0x75, 0x54, 0xe0, 0x4d,
				0x1f, 0x7f, 0xa2, 0xc3, 0x32, 0x41, 0xbd, 0x8f,
				0x01, 0xba, 0x22, 0x0d },
		.ciphertext = { 0x13, 0x1d, 0x43, 0xe0, 0xde, 0xa1, 0xbe, 0x5c,
				0x5a, 0x1b, 0xfd, 0x97, 0x1d, 0x85, 0x2c, 0xbf,
				0x71, 0x2d, 0x7b, 0x4f, 0x57, 0x96, 0x1f, 0xea,
				0x32, 0x08, 0xaf, 0xa8, 0xbc, 0xa4, 0x33, 0xf4,
				0x56, 0xad, 0x09, 0xc7, 0x41, 0x7e, 0x58, 0xbc,
				0x69, 0xcf, 0x88, 0x66, 0xd1, 0x35, 0x3f, 0x74,
				0x86, 0x5e, 0x80, 0x78, 0x1d, 0x20, 0x2d, 0xfb,
				0x3e, 0xcf, 0xf7, 0xfc, 0xbc, 0x3b, 0x19, 0x0f,
				0xe8, 0x2a, 0x20, 0x4e, 0xd0, 0xe3, 0x50, 0xfc,
				0x0f, 0x6f, 0x26, 0x13, 0xb2, 0xf2, 0xbc, 0xa6,
				0xdf, 0x5a, 0x47, 0x3a, 0x57, 0xa4, 0xa0, 0x0d,
				0x98, 0x5e, 0xba, 0xd8, 0x80, 0xd6, 0xf2, 0x38,
				0x64, 0xa0, 0x7b, 0x01 }
	}
};

static crypto_test_reference_t zuc_eia3_reference[] = {
	{
		.bit_mode = true,
		.auth_key_length = ZUC_EIA3_KEY_LEN,
		.auth_key = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		.auth_iv_length = ZUC_EIA3_IV_LEN,
		.auth_iv = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		.length = 1, /* 1 bytes */
		.plaintext = {  0x00 },
		.ciphertext = { 0x00 },
		.digest_length = ZUC_EIA3_DIGEST_LEN,
		.digest = { 0xc8, 0xa9, 0x59, 0x5e }
	},
	{
		.bit_mode = true,
		.auth_key_length = ZUC_EIA3_KEY_LEN,
		.auth_key = { 0xc9, 0xe6, 0xce, 0xc4, 0x60, 0x7c, 0x72, 0xdb,
			      0x00, 0x0a, 0xef, 0xa8, 0x83, 0x85, 0xab, 0x0a},
		.auth_iv_length = ZUC_EIA3_IV_LEN,
		.auth_iv = { 0xa9, 0x40, 0x59, 0xda, 0x50, 0x00, 0x00, 0x00,
			0x29, 0x40, 0x59, 0xda, 0x50, 0x00, 0x80, 0x00 },
		.length = 577, /* 73 bytes */
		.plaintext = {  0x98, 0x3b, 0x41, 0xd4, 0x7d, 0x78, 0x0c, 0x9e,
				0x1a, 0xd1, 0x1d, 0x7e, 0xb7, 0x03, 0x91, 0xb1,
				0xde, 0x0b, 0x35, 0xda, 0x2d, 0xc6, 0x2f, 0x83,
				0xe7, 0xb7, 0x8d, 0x63, 0x06, 0xca, 0x0e, 0xa0,
				0x7e, 0x94, 0x1b, 0x7b, 0xe9, 0x13, 0x48, 0xf9,
				0xfc, 0xb1, 0x70, 0xe2, 0x21, 0x7f, 0xec, 0xd9,
				0x7f, 0x9f, 0x68, 0xad, 0xb1, 0x6e, 0x5d, 0x7d,
				0x21, 0xe5, 0x69, 0xd2, 0x80, 0xed, 0x77, 0x5c,
				0xeb, 0xde, 0x3f, 0x40, 0x93, 0xc5, 0x38, 0x81,
				0x00 },
		.ciphertext = { 0x98, 0x3b, 0x41, 0xd4, 0x7d, 0x78, 0x0c, 0x9e,
				0x1a, 0xd1, 0x1d, 0x7e, 0xb7, 0x03, 0x91, 0xb1,
				0xde, 0x0b, 0x35, 0xda, 0x2d, 0xc6, 0x2f, 0x83,
				0xe7, 0xb7, 0x8d, 0x63, 0x06, 0xca, 0x0e, 0xa0,
				0x7e, 0x94, 0x1b, 0x7b, 0xe9, 0x13, 0x48, 0xf9,
				0xfc, 0xb1, 0x70, 0xe2, 0x21, 0x7f, 0xec, 0xd9,
				0x7f, 0x9f, 0x68, 0xad, 0xb1, 0x6e, 0x5d, 0x7d,
				0x21, 0xe5, 0x69, 0xd2, 0x80, 0xed, 0x77, 0x5c,
				0xeb, 0xde, 0x3f, 0x40, 0x93, 0xc5, 0x38, 0x81,
				0x00 },
		.digest_length = ZUC_EIA3_DIGEST_LEN,
		.digest = { 0xfa, 0xe8, 0xff, 0x0b }
	}
};

#endif
